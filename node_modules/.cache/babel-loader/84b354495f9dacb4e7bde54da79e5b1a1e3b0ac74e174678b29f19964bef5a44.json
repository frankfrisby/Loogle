{"ast":null,"code":"/**\n * this method uses indexeddb to store the messages\n * There is currently no observerAPI for idb\n * @link https://github.com/w3c/IndexedDB/issues/51\n * \n * When working on this, ensure to use these performance optimizations:\n * @link https://rxdb.info/slow-indexeddb.html\n */\n\nimport { sleep, randomInt, randomToken, microSeconds as micro, PROMISE_RESOLVED_VOID } from '../util.js';\nexport var microSeconds = micro;\nimport { ObliviousSet } from 'oblivious-set';\nimport { fillOptionsWithDefaults } from '../options.js';\nvar DB_PREFIX = 'pubkey.broadcast-channel-0-';\nvar OBJECT_STORE_ID = 'messages';\n\n/**\n * Use relaxed durability for faster performance on all transactions.\n * @link https://nolanlawson.com/2021/08/22/speeding-up-indexeddb-reads-and-writes/\n */\nexport var TRANSACTION_SETTINGS = {\n  durability: 'relaxed'\n};\nexport var type = 'idb';\nexport function getIdb() {\n  if (typeof indexedDB !== 'undefined') return indexedDB;\n  if (typeof window !== 'undefined') {\n    if (typeof window.mozIndexedDB !== 'undefined') return window.mozIndexedDB;\n    if (typeof window.webkitIndexedDB !== 'undefined') return window.webkitIndexedDB;\n    if (typeof window.msIndexedDB !== 'undefined') return window.msIndexedDB;\n  }\n  return false;\n}\n\n/**\n * If possible, we should explicitly commit IndexedDB transactions\n * for better performance.\n * @link https://nolanlawson.com/2021/08/22/speeding-up-indexeddb-reads-and-writes/\n */\nexport function commitIndexedDBTransaction(tx) {\n  if (tx.commit) {\n    tx.commit();\n  }\n}\nexport function createDatabase(channelName) {\n  var IndexedDB = getIdb();\n\n  // create table\n  var dbName = DB_PREFIX + channelName;\n\n  /**\n   * All IndexedDB databases are opened without version\n   * because it is a bit faster, especially on firefox\n   * @link http://nparashuram.com/IndexedDB/perf/#Open%20Database%20with%20version\n   */\n  var openRequest = IndexedDB.open(dbName);\n  openRequest.onupgradeneeded = function (ev) {\n    var db = ev.target.result;\n    db.createObjectStore(OBJECT_STORE_ID, {\n      keyPath: 'id',\n      autoIncrement: true\n    });\n  };\n  return new Promise(function (res, rej) {\n    openRequest.onerror = function (ev) {\n      return rej(ev);\n    };\n    openRequest.onsuccess = function () {\n      res(openRequest.result);\n    };\n  });\n}\n\n/**\n * writes the new message to the database\n * so other readers can find it\n */\nexport function writeMessage(db, readerUuid, messageJson) {\n  var time = new Date().getTime();\n  var writeObject = {\n    uuid: readerUuid,\n    time: time,\n    data: messageJson\n  };\n  var tx = db.transaction([OBJECT_STORE_ID], 'readwrite', TRANSACTION_SETTINGS);\n  return new Promise(function (res, rej) {\n    tx.oncomplete = function () {\n      return res();\n    };\n    tx.onerror = function (ev) {\n      return rej(ev);\n    };\n    var objectStore = tx.objectStore(OBJECT_STORE_ID);\n    objectStore.add(writeObject);\n    commitIndexedDBTransaction(tx);\n  });\n}\nexport function getAllMessages(db) {\n  var tx = db.transaction(OBJECT_STORE_ID, 'readonly', TRANSACTION_SETTINGS);\n  var objectStore = tx.objectStore(OBJECT_STORE_ID);\n  var ret = [];\n  return new Promise(function (res) {\n    objectStore.openCursor().onsuccess = function (ev) {\n      var cursor = ev.target.result;\n      if (cursor) {\n        ret.push(cursor.value);\n        //alert(\"Name for SSN \" + cursor.key + \" is \" + cursor.value.name);\n        cursor[\"continue\"]();\n      } else {\n        commitIndexedDBTransaction(tx);\n        res(ret);\n      }\n    };\n  });\n}\nexport function getMessagesHigherThan(db, lastCursorId) {\n  var tx = db.transaction(OBJECT_STORE_ID, 'readonly', TRANSACTION_SETTINGS);\n  var objectStore = tx.objectStore(OBJECT_STORE_ID);\n  var ret = [];\n  var keyRangeValue = IDBKeyRange.bound(lastCursorId + 1, Infinity);\n\n  /**\n   * Optimization shortcut,\n   * if getAll() can be used, do not use a cursor.\n   * @link https://rxdb.info/slow-indexeddb.html\n   */\n  if (objectStore.getAll) {\n    var getAllRequest = objectStore.getAll(keyRangeValue);\n    return new Promise(function (res, rej) {\n      getAllRequest.onerror = function (err) {\n        return rej(err);\n      };\n      getAllRequest.onsuccess = function (e) {\n        res(e.target.result);\n      };\n    });\n  }\n  function openCursor() {\n    // Occasionally Safari will fail on IDBKeyRange.bound, this\n    // catches that error, having it open the cursor to the first\n    // item. When it gets data it will advance to the desired key.\n    try {\n      keyRangeValue = IDBKeyRange.bound(lastCursorId + 1, Infinity);\n      return objectStore.openCursor(keyRangeValue);\n    } catch (e) {\n      return objectStore.openCursor();\n    }\n  }\n  return new Promise(function (res, rej) {\n    var openCursorRequest = openCursor();\n    openCursorRequest.onerror = function (err) {\n      return rej(err);\n    };\n    openCursorRequest.onsuccess = function (ev) {\n      var cursor = ev.target.result;\n      if (cursor) {\n        if (cursor.value.id < lastCursorId + 1) {\n          cursor[\"continue\"](lastCursorId + 1);\n        } else {\n          ret.push(cursor.value);\n          cursor[\"continue\"]();\n        }\n      } else {\n        commitIndexedDBTransaction(tx);\n        res(ret);\n      }\n    };\n  });\n}\nexport function removeMessagesById(channelState, ids) {\n  if (channelState.closed) {\n    return Promise.resolve([]);\n  }\n  var tx = channelState.db.transaction(OBJECT_STORE_ID, 'readwrite', TRANSACTION_SETTINGS);\n  var objectStore = tx.objectStore(OBJECT_STORE_ID);\n  return Promise.all(ids.map(function (id) {\n    var deleteRequest = objectStore[\"delete\"](id);\n    return new Promise(function (res) {\n      deleteRequest.onsuccess = function () {\n        return res();\n      };\n    });\n  }));\n}\nexport function getOldMessages(db, ttl) {\n  var olderThen = new Date().getTime() - ttl;\n  var tx = db.transaction(OBJECT_STORE_ID, 'readonly', TRANSACTION_SETTINGS);\n  var objectStore = tx.objectStore(OBJECT_STORE_ID);\n  var ret = [];\n  return new Promise(function (res) {\n    objectStore.openCursor().onsuccess = function (ev) {\n      var cursor = ev.target.result;\n      if (cursor) {\n        var msgObk = cursor.value;\n        if (msgObk.time < olderThen) {\n          ret.push(msgObk);\n          //alert(\"Name for SSN \" + cursor.key + \" is \" + cursor.value.name);\n          cursor[\"continue\"]();\n        } else {\n          // no more old messages,\n          commitIndexedDBTransaction(tx);\n          res(ret);\n        }\n      } else {\n        res(ret);\n      }\n    };\n  });\n}\nexport function cleanOldMessages(channelState) {\n  return getOldMessages(channelState.db, channelState.options.idb.ttl).then(function (tooOld) {\n    return removeMessagesById(channelState, tooOld.map(function (msg) {\n      return msg.id;\n    }));\n  });\n}\nexport function create(channelName, options) {\n  options = fillOptionsWithDefaults(options);\n  return createDatabase(channelName).then(function (db) {\n    var state = {\n      closed: false,\n      lastCursorId: 0,\n      channelName: channelName,\n      options: options,\n      uuid: randomToken(),\n      /**\n       * emittedMessagesIds\n       * contains all messages that have been emitted before\n       * @type {ObliviousSet}\n       */\n      eMIs: new ObliviousSet(options.idb.ttl * 2),\n      // ensures we do not read messages in parallel\n      writeBlockPromise: PROMISE_RESOLVED_VOID,\n      messagesCallback: null,\n      readQueuePromises: [],\n      db: db\n    };\n\n    /**\n     * Handle abrupt closes that do not originate from db.close().\n     * This could happen, for example, if the underlying storage is\n     * removed or if the user clears the database in the browser's\n     * history preferences.\n     */\n    db.onclose = function () {\n      state.closed = true;\n      if (options.idb.onclose) options.idb.onclose();\n    };\n\n    /**\n     * if service-workers are used,\n     * we have no 'storage'-event if they post a message,\n     * therefore we also have to set an interval\n     */\n    _readLoop(state);\n    return state;\n  });\n}\nfunction _readLoop(state) {\n  if (state.closed) return;\n  readNewMessages(state).then(function () {\n    return sleep(state.options.idb.fallbackInterval);\n  }).then(function () {\n    return _readLoop(state);\n  });\n}\nfunction _filterMessage(msgObj, state) {\n  if (msgObj.uuid === state.uuid) return false; // send by own\n  if (state.eMIs.has(msgObj.id)) return false; // already emitted\n  if (msgObj.data.time < state.messagesCallbackTime) return false; // older then onMessageCallback\n  return true;\n}\n\n/**\n * reads all new messages from the database and emits them\n */\nfunction readNewMessages(state) {\n  // channel already closed\n  if (state.closed) return PROMISE_RESOLVED_VOID;\n\n  // if no one is listening, we do not need to scan for new messages\n  if (!state.messagesCallback) return PROMISE_RESOLVED_VOID;\n  return getMessagesHigherThan(state.db, state.lastCursorId).then(function (newerMessages) {\n    var useMessages = newerMessages\n    /**\n     * there is a bug in iOS where the msgObj can be undefined sometimes\n     * so we filter them out\n     * @link https://github.com/pubkey/broadcast-channel/issues/19\n     */.filter(function (msgObj) {\n      return !!msgObj;\n    }).map(function (msgObj) {\n      if (msgObj.id > state.lastCursorId) {\n        state.lastCursorId = msgObj.id;\n      }\n      return msgObj;\n    }).filter(function (msgObj) {\n      return _filterMessage(msgObj, state);\n    }).sort(function (msgObjA, msgObjB) {\n      return msgObjA.time - msgObjB.time;\n    }); // sort by time\n    useMessages.forEach(function (msgObj) {\n      if (state.messagesCallback) {\n        state.eMIs.add(msgObj.id);\n        state.messagesCallback(msgObj.data);\n      }\n    });\n    return PROMISE_RESOLVED_VOID;\n  });\n}\nexport function close(channelState) {\n  channelState.closed = true;\n  channelState.db.close();\n}\nexport function postMessage(channelState, messageJson) {\n  channelState.writeBlockPromise = channelState.writeBlockPromise.then(function () {\n    return writeMessage(channelState.db, channelState.uuid, messageJson);\n  }).then(function () {\n    if (randomInt(0, 10) === 0) {\n      /* await (do not await) */\n      cleanOldMessages(channelState);\n    }\n  });\n  return channelState.writeBlockPromise;\n}\nexport function onMessage(channelState, fn, time) {\n  channelState.messagesCallbackTime = time;\n  channelState.messagesCallback = fn;\n  readNewMessages(channelState);\n}\nexport function canBeUsed() {\n  return !!getIdb();\n}\nexport function averageResponseTime(options) {\n  return options.idb.fallbackInterval * 2;\n}\nexport var IndexedDBMethod = {\n  create: create,\n  close: close,\n  onMessage: onMessage,\n  postMessage: postMessage,\n  canBeUsed: canBeUsed,\n  type: type,\n  averageResponseTime: averageResponseTime,\n  microSeconds: microSeconds\n};","map":{"version":3,"names":["sleep","randomInt","randomToken","microSeconds","micro","PROMISE_RESOLVED_VOID","ObliviousSet","fillOptionsWithDefaults","DB_PREFIX","OBJECT_STORE_ID","TRANSACTION_SETTINGS","durability","type","getIdb","indexedDB","window","mozIndexedDB","webkitIndexedDB","msIndexedDB","commitIndexedDBTransaction","tx","commit","createDatabase","channelName","IndexedDB","dbName","openRequest","open","onupgradeneeded","ev","db","target","result","createObjectStore","keyPath","autoIncrement","Promise","res","rej","onerror","onsuccess","writeMessage","readerUuid","messageJson","time","Date","getTime","writeObject","uuid","data","transaction","oncomplete","objectStore","add","getAllMessages","ret","openCursor","cursor","push","value","getMessagesHigherThan","lastCursorId","keyRangeValue","IDBKeyRange","bound","Infinity","getAll","getAllRequest","err","e","openCursorRequest","id","removeMessagesById","channelState","ids","closed","resolve","all","map","deleteRequest","getOldMessages","ttl","olderThen","msgObk","cleanOldMessages","options","idb","then","tooOld","msg","create","state","eMIs","writeBlockPromise","messagesCallback","readQueuePromises","onclose","_readLoop","readNewMessages","fallbackInterval","_filterMessage","msgObj","has","messagesCallbackTime","newerMessages","useMessages","filter","sort","msgObjA","msgObjB","forEach","close","postMessage","onMessage","fn","canBeUsed","averageResponseTime","IndexedDBMethod"],"sources":["C:/Users/frank/node_modules/broadcast-channel/dist/esbrowser/methods/indexed-db.js"],"sourcesContent":["/**\n * this method uses indexeddb to store the messages\n * There is currently no observerAPI for idb\n * @link https://github.com/w3c/IndexedDB/issues/51\n * \n * When working on this, ensure to use these performance optimizations:\n * @link https://rxdb.info/slow-indexeddb.html\n */\n\nimport { sleep, randomInt, randomToken, microSeconds as micro, PROMISE_RESOLVED_VOID } from '../util.js';\nexport var microSeconds = micro;\nimport { ObliviousSet } from 'oblivious-set';\nimport { fillOptionsWithDefaults } from '../options.js';\nvar DB_PREFIX = 'pubkey.broadcast-channel-0-';\nvar OBJECT_STORE_ID = 'messages';\n\n/**\n * Use relaxed durability for faster performance on all transactions.\n * @link https://nolanlawson.com/2021/08/22/speeding-up-indexeddb-reads-and-writes/\n */\nexport var TRANSACTION_SETTINGS = {\n  durability: 'relaxed'\n};\nexport var type = 'idb';\nexport function getIdb() {\n  if (typeof indexedDB !== 'undefined') return indexedDB;\n  if (typeof window !== 'undefined') {\n    if (typeof window.mozIndexedDB !== 'undefined') return window.mozIndexedDB;\n    if (typeof window.webkitIndexedDB !== 'undefined') return window.webkitIndexedDB;\n    if (typeof window.msIndexedDB !== 'undefined') return window.msIndexedDB;\n  }\n  return false;\n}\n\n/**\n * If possible, we should explicitly commit IndexedDB transactions\n * for better performance.\n * @link https://nolanlawson.com/2021/08/22/speeding-up-indexeddb-reads-and-writes/\n */\nexport function commitIndexedDBTransaction(tx) {\n  if (tx.commit) {\n    tx.commit();\n  }\n}\nexport function createDatabase(channelName) {\n  var IndexedDB = getIdb();\n\n  // create table\n  var dbName = DB_PREFIX + channelName;\n\n  /**\n   * All IndexedDB databases are opened without version\n   * because it is a bit faster, especially on firefox\n   * @link http://nparashuram.com/IndexedDB/perf/#Open%20Database%20with%20version\n   */\n  var openRequest = IndexedDB.open(dbName);\n  openRequest.onupgradeneeded = function (ev) {\n    var db = ev.target.result;\n    db.createObjectStore(OBJECT_STORE_ID, {\n      keyPath: 'id',\n      autoIncrement: true\n    });\n  };\n  return new Promise(function (res, rej) {\n    openRequest.onerror = function (ev) {\n      return rej(ev);\n    };\n    openRequest.onsuccess = function () {\n      res(openRequest.result);\n    };\n  });\n}\n\n/**\n * writes the new message to the database\n * so other readers can find it\n */\nexport function writeMessage(db, readerUuid, messageJson) {\n  var time = new Date().getTime();\n  var writeObject = {\n    uuid: readerUuid,\n    time: time,\n    data: messageJson\n  };\n  var tx = db.transaction([OBJECT_STORE_ID], 'readwrite', TRANSACTION_SETTINGS);\n  return new Promise(function (res, rej) {\n    tx.oncomplete = function () {\n      return res();\n    };\n    tx.onerror = function (ev) {\n      return rej(ev);\n    };\n    var objectStore = tx.objectStore(OBJECT_STORE_ID);\n    objectStore.add(writeObject);\n    commitIndexedDBTransaction(tx);\n  });\n}\nexport function getAllMessages(db) {\n  var tx = db.transaction(OBJECT_STORE_ID, 'readonly', TRANSACTION_SETTINGS);\n  var objectStore = tx.objectStore(OBJECT_STORE_ID);\n  var ret = [];\n  return new Promise(function (res) {\n    objectStore.openCursor().onsuccess = function (ev) {\n      var cursor = ev.target.result;\n      if (cursor) {\n        ret.push(cursor.value);\n        //alert(\"Name for SSN \" + cursor.key + \" is \" + cursor.value.name);\n        cursor[\"continue\"]();\n      } else {\n        commitIndexedDBTransaction(tx);\n        res(ret);\n      }\n    };\n  });\n}\nexport function getMessagesHigherThan(db, lastCursorId) {\n  var tx = db.transaction(OBJECT_STORE_ID, 'readonly', TRANSACTION_SETTINGS);\n  var objectStore = tx.objectStore(OBJECT_STORE_ID);\n  var ret = [];\n  var keyRangeValue = IDBKeyRange.bound(lastCursorId + 1, Infinity);\n\n  /**\n   * Optimization shortcut,\n   * if getAll() can be used, do not use a cursor.\n   * @link https://rxdb.info/slow-indexeddb.html\n   */\n  if (objectStore.getAll) {\n    var getAllRequest = objectStore.getAll(keyRangeValue);\n    return new Promise(function (res, rej) {\n      getAllRequest.onerror = function (err) {\n        return rej(err);\n      };\n      getAllRequest.onsuccess = function (e) {\n        res(e.target.result);\n      };\n    });\n  }\n  function openCursor() {\n    // Occasionally Safari will fail on IDBKeyRange.bound, this\n    // catches that error, having it open the cursor to the first\n    // item. When it gets data it will advance to the desired key.\n    try {\n      keyRangeValue = IDBKeyRange.bound(lastCursorId + 1, Infinity);\n      return objectStore.openCursor(keyRangeValue);\n    } catch (e) {\n      return objectStore.openCursor();\n    }\n  }\n  return new Promise(function (res, rej) {\n    var openCursorRequest = openCursor();\n    openCursorRequest.onerror = function (err) {\n      return rej(err);\n    };\n    openCursorRequest.onsuccess = function (ev) {\n      var cursor = ev.target.result;\n      if (cursor) {\n        if (cursor.value.id < lastCursorId + 1) {\n          cursor[\"continue\"](lastCursorId + 1);\n        } else {\n          ret.push(cursor.value);\n          cursor[\"continue\"]();\n        }\n      } else {\n        commitIndexedDBTransaction(tx);\n        res(ret);\n      }\n    };\n  });\n}\nexport function removeMessagesById(channelState, ids) {\n  if (channelState.closed) {\n    return Promise.resolve([]);\n  }\n  var tx = channelState.db.transaction(OBJECT_STORE_ID, 'readwrite', TRANSACTION_SETTINGS);\n  var objectStore = tx.objectStore(OBJECT_STORE_ID);\n  return Promise.all(ids.map(function (id) {\n    var deleteRequest = objectStore[\"delete\"](id);\n    return new Promise(function (res) {\n      deleteRequest.onsuccess = function () {\n        return res();\n      };\n    });\n  }));\n}\nexport function getOldMessages(db, ttl) {\n  var olderThen = new Date().getTime() - ttl;\n  var tx = db.transaction(OBJECT_STORE_ID, 'readonly', TRANSACTION_SETTINGS);\n  var objectStore = tx.objectStore(OBJECT_STORE_ID);\n  var ret = [];\n  return new Promise(function (res) {\n    objectStore.openCursor().onsuccess = function (ev) {\n      var cursor = ev.target.result;\n      if (cursor) {\n        var msgObk = cursor.value;\n        if (msgObk.time < olderThen) {\n          ret.push(msgObk);\n          //alert(\"Name for SSN \" + cursor.key + \" is \" + cursor.value.name);\n          cursor[\"continue\"]();\n        } else {\n          // no more old messages,\n          commitIndexedDBTransaction(tx);\n          res(ret);\n        }\n      } else {\n        res(ret);\n      }\n    };\n  });\n}\nexport function cleanOldMessages(channelState) {\n  return getOldMessages(channelState.db, channelState.options.idb.ttl).then(function (tooOld) {\n    return removeMessagesById(channelState, tooOld.map(function (msg) {\n      return msg.id;\n    }));\n  });\n}\nexport function create(channelName, options) {\n  options = fillOptionsWithDefaults(options);\n  return createDatabase(channelName).then(function (db) {\n    var state = {\n      closed: false,\n      lastCursorId: 0,\n      channelName: channelName,\n      options: options,\n      uuid: randomToken(),\n      /**\n       * emittedMessagesIds\n       * contains all messages that have been emitted before\n       * @type {ObliviousSet}\n       */\n      eMIs: new ObliviousSet(options.idb.ttl * 2),\n      // ensures we do not read messages in parallel\n      writeBlockPromise: PROMISE_RESOLVED_VOID,\n      messagesCallback: null,\n      readQueuePromises: [],\n      db: db\n    };\n\n    /**\n     * Handle abrupt closes that do not originate from db.close().\n     * This could happen, for example, if the underlying storage is\n     * removed or if the user clears the database in the browser's\n     * history preferences.\n     */\n    db.onclose = function () {\n      state.closed = true;\n      if (options.idb.onclose) options.idb.onclose();\n    };\n\n    /**\n     * if service-workers are used,\n     * we have no 'storage'-event if they post a message,\n     * therefore we also have to set an interval\n     */\n    _readLoop(state);\n    return state;\n  });\n}\nfunction _readLoop(state) {\n  if (state.closed) return;\n  readNewMessages(state).then(function () {\n    return sleep(state.options.idb.fallbackInterval);\n  }).then(function () {\n    return _readLoop(state);\n  });\n}\nfunction _filterMessage(msgObj, state) {\n  if (msgObj.uuid === state.uuid) return false; // send by own\n  if (state.eMIs.has(msgObj.id)) return false; // already emitted\n  if (msgObj.data.time < state.messagesCallbackTime) return false; // older then onMessageCallback\n  return true;\n}\n\n/**\n * reads all new messages from the database and emits them\n */\nfunction readNewMessages(state) {\n  // channel already closed\n  if (state.closed) return PROMISE_RESOLVED_VOID;\n\n  // if no one is listening, we do not need to scan for new messages\n  if (!state.messagesCallback) return PROMISE_RESOLVED_VOID;\n  return getMessagesHigherThan(state.db, state.lastCursorId).then(function (newerMessages) {\n    var useMessages = newerMessages\n    /**\n     * there is a bug in iOS where the msgObj can be undefined sometimes\n     * so we filter them out\n     * @link https://github.com/pubkey/broadcast-channel/issues/19\n     */.filter(function (msgObj) {\n      return !!msgObj;\n    }).map(function (msgObj) {\n      if (msgObj.id > state.lastCursorId) {\n        state.lastCursorId = msgObj.id;\n      }\n      return msgObj;\n    }).filter(function (msgObj) {\n      return _filterMessage(msgObj, state);\n    }).sort(function (msgObjA, msgObjB) {\n      return msgObjA.time - msgObjB.time;\n    }); // sort by time\n    useMessages.forEach(function (msgObj) {\n      if (state.messagesCallback) {\n        state.eMIs.add(msgObj.id);\n        state.messagesCallback(msgObj.data);\n      }\n    });\n    return PROMISE_RESOLVED_VOID;\n  });\n}\nexport function close(channelState) {\n  channelState.closed = true;\n  channelState.db.close();\n}\nexport function postMessage(channelState, messageJson) {\n  channelState.writeBlockPromise = channelState.writeBlockPromise.then(function () {\n    return writeMessage(channelState.db, channelState.uuid, messageJson);\n  }).then(function () {\n    if (randomInt(0, 10) === 0) {\n      /* await (do not await) */\n      cleanOldMessages(channelState);\n    }\n  });\n  return channelState.writeBlockPromise;\n}\nexport function onMessage(channelState, fn, time) {\n  channelState.messagesCallbackTime = time;\n  channelState.messagesCallback = fn;\n  readNewMessages(channelState);\n}\nexport function canBeUsed() {\n  return !!getIdb();\n}\nexport function averageResponseTime(options) {\n  return options.idb.fallbackInterval * 2;\n}\nexport var IndexedDBMethod = {\n  create: create,\n  close: close,\n  onMessage: onMessage,\n  postMessage: postMessage,\n  canBeUsed: canBeUsed,\n  type: type,\n  averageResponseTime: averageResponseTime,\n  microSeconds: microSeconds\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}