{"ast":null,"code":"export function fillOptionsWithDefaults() {\n  var originalOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var options = JSON.parse(JSON.stringify(originalOptions));\n\n  // main\n  if (typeof options.webWorkerSupport === 'undefined') options.webWorkerSupport = true;\n\n  // indexed-db\n  if (!options.idb) options.idb = {};\n  //  after this time the messages get deleted\n  if (!options.idb.ttl) options.idb.ttl = 1000 * 45;\n  if (!options.idb.fallbackInterval) options.idb.fallbackInterval = 150;\n  //  handles abrupt db onclose events.\n  if (originalOptions.idb && typeof originalOptions.idb.onclose === 'function') options.idb.onclose = originalOptions.idb.onclose;\n\n  // localstorage\n  if (!options.localstorage) options.localstorage = {};\n  if (!options.localstorage.removeTimeout) options.localstorage.removeTimeout = 1000 * 60;\n\n  // custom methods\n  if (originalOptions.methods) options.methods = originalOptions.methods;\n\n  // node\n  if (!options.node) options.node = {};\n  if (!options.node.ttl) options.node.ttl = 1000 * 60 * 2; // 2 minutes;\n  /**\n   * On linux use 'ulimit -Hn' to get the limit of open files.\n   * On ubuntu this was 4096 for me, so we use half of that as maxParallelWrites default.\n   */\n  if (!options.node.maxParallelWrites) options.node.maxParallelWrites = 2048;\n  if (typeof options.node.useFastPath === 'undefined') options.node.useFastPath = true;\n  return options;\n}","map":{"version":3,"names":["fillOptionsWithDefaults","originalOptions","arguments","length","undefined","options","JSON","parse","stringify","webWorkerSupport","idb","ttl","fallbackInterval","onclose","localstorage","removeTimeout","methods","node","maxParallelWrites","useFastPath"],"sources":["C:/Users/frank/node_modules/broadcast-channel/dist/esbrowser/options.js"],"sourcesContent":["export function fillOptionsWithDefaults() {\n  var originalOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var options = JSON.parse(JSON.stringify(originalOptions));\n\n  // main\n  if (typeof options.webWorkerSupport === 'undefined') options.webWorkerSupport = true;\n\n  // indexed-db\n  if (!options.idb) options.idb = {};\n  //  after this time the messages get deleted\n  if (!options.idb.ttl) options.idb.ttl = 1000 * 45;\n  if (!options.idb.fallbackInterval) options.idb.fallbackInterval = 150;\n  //  handles abrupt db onclose events.\n  if (originalOptions.idb && typeof originalOptions.idb.onclose === 'function') options.idb.onclose = originalOptions.idb.onclose;\n\n  // localstorage\n  if (!options.localstorage) options.localstorage = {};\n  if (!options.localstorage.removeTimeout) options.localstorage.removeTimeout = 1000 * 60;\n\n  // custom methods\n  if (originalOptions.methods) options.methods = originalOptions.methods;\n\n  // node\n  if (!options.node) options.node = {};\n  if (!options.node.ttl) options.node.ttl = 1000 * 60 * 2; // 2 minutes;\n  /**\n   * On linux use 'ulimit -Hn' to get the limit of open files.\n   * On ubuntu this was 4096 for me, so we use half of that as maxParallelWrites default.\n   */\n  if (!options.node.maxParallelWrites) options.node.maxParallelWrites = 2048;\n  if (typeof options.node.useFastPath === 'undefined') options.node.useFastPath = true;\n  return options;\n}"],"mappings":"AAAA,OAAO,SAASA,uBAAuB,GAAG;EACxC,IAAIC,eAAe,GAAGC,SAAS,CAACC,MAAM,GAAG,CAAC,IAAID,SAAS,CAAC,CAAC,CAAC,KAAKE,SAAS,GAAGF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;EAC5F,IAAIG,OAAO,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,SAAS,CAACP,eAAe,CAAC,CAAC;;EAEzD;EACA,IAAI,OAAOI,OAAO,CAACI,gBAAgB,KAAK,WAAW,EAAEJ,OAAO,CAACI,gBAAgB,GAAG,IAAI;;EAEpF;EACA,IAAI,CAACJ,OAAO,CAACK,GAAG,EAAEL,OAAO,CAACK,GAAG,GAAG,CAAC,CAAC;EAClC;EACA,IAAI,CAACL,OAAO,CAACK,GAAG,CAACC,GAAG,EAAEN,OAAO,CAACK,GAAG,CAACC,GAAG,GAAG,IAAI,GAAG,EAAE;EACjD,IAAI,CAACN,OAAO,CAACK,GAAG,CAACE,gBAAgB,EAAEP,OAAO,CAACK,GAAG,CAACE,gBAAgB,GAAG,GAAG;EACrE;EACA,IAAIX,eAAe,CAACS,GAAG,IAAI,OAAOT,eAAe,CAACS,GAAG,CAACG,OAAO,KAAK,UAAU,EAAER,OAAO,CAACK,GAAG,CAACG,OAAO,GAAGZ,eAAe,CAACS,GAAG,CAACG,OAAO;;EAE/H;EACA,IAAI,CAACR,OAAO,CAACS,YAAY,EAAET,OAAO,CAACS,YAAY,GAAG,CAAC,CAAC;EACpD,IAAI,CAACT,OAAO,CAACS,YAAY,CAACC,aAAa,EAAEV,OAAO,CAACS,YAAY,CAACC,aAAa,GAAG,IAAI,GAAG,EAAE;;EAEvF;EACA,IAAId,eAAe,CAACe,OAAO,EAAEX,OAAO,CAACW,OAAO,GAAGf,eAAe,CAACe,OAAO;;EAEtE;EACA,IAAI,CAACX,OAAO,CAACY,IAAI,EAAEZ,OAAO,CAACY,IAAI,GAAG,CAAC,CAAC;EACpC,IAAI,CAACZ,OAAO,CAACY,IAAI,CAACN,GAAG,EAAEN,OAAO,CAACY,IAAI,CAACN,GAAG,GAAG,IAAI,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC;EACzD;AACF;AACA;AACA;EACE,IAAI,CAACN,OAAO,CAACY,IAAI,CAACC,iBAAiB,EAAEb,OAAO,CAACY,IAAI,CAACC,iBAAiB,GAAG,IAAI;EAC1E,IAAI,OAAOb,OAAO,CAACY,IAAI,CAACE,WAAW,KAAK,WAAW,EAAEd,OAAO,CAACY,IAAI,CAACE,WAAW,GAAG,IAAI;EACpF,OAAOd,OAAO;AAChB"},"metadata":{},"sourceType":"module","externalDependencies":[]}